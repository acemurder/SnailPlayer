apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.antfortune.freeline'



android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
//        config {
//            storeFile file(RELEASE_STORE_FILE)
//            keyAlias KEY_ALIAS
//            keyPassword KEY_PASSWORD
//            storePassword STORE_PASSWORD
//        }
//        debug {
//            storeFile file(DEBUG_STORE_FILE)
//            keyAlias KEY_ALIAS
//            keyPassword KEY_PASSWORD
//            storePassword STORE_PASSWORD
//        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            //signingConfig signingConfigs.debug
            applicationVariants.all { variant ->
                if (variant.buildType.name == "debug") {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "SnailPlayer-debug.apk"
                            output.outputFile = new File(outputFile.parent + "/debug", fileName)
                        }
                    }
                }
            }
        }

        release {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            //signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                if (variant.buildType.name == "release") {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "SnailPlayer-release.apk"
                            output.outputFile = new File(outputFile.parent + "/release", fileName)
                        }
                    }
                }
            }
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'

    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["support-annotations"]
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["recyclerview-v7"]

    compile rootProject.ext.dependencies["lifecycle-runtime"]
    compile rootProject.ext.dependencies["lifecycle-extensions"]
    compile rootProject.ext.dependencies["lifecycle-reactivestreams"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    compile rootProject.ext.dependencies["room-runtime"]
    annotationProcessor rootProject.ext.dependencies["room-compiler"]

    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["okhttp-logging-interceptor"]
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["retrofit-converter-gson"]
    compile rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    compile rootProject.ext.dependencies["glide"]
    annotationProcessor rootProject.ext.dependencies["glide-compiler"]
    compile rootProject.ext.dependencies["gson"]
    compile rootProject.ext.dependencies["eventbus"]
    compile rootProject.ext.dependencies["easypermissions"]
    compile rootProject.ext.dependencies["umeng"]

    compile rootProject.ext.dependencies["material-dialog"]
    compile rootProject.ext.dependencies["photoview"]
    compile rootProject.ext.dependencies["ucrop"]
    compile (rootProject.ext.dependencies["vLayout"]) {
        transitive = true
    }
    compile rootProject.ext.dependencies["lottie"]

    compile files('libs/iQIYISdk.jar')
    compile project(':util')
}
